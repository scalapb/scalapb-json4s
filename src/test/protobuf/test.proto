syntax = "proto2";

package jsontest;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

enum MyEnum {
  UNKNOWN = 0;
  V1 = 1;
  V2 = 2;
}

enum MyEnumWithoutDefault {
  A1 = 1;
  A2 = 2;
}

message MyTest {
  optional string hello = 1;
  optional int32 foobar = 2;
  optional int64 bazinga = 3;
  repeated string primitive_sequence = 4;
  repeated MyTest rep_message = 5;
  optional MyTest opt_message = 6;

  map<string, int32> string_to_int32 = 7;
  map<int32, MyTest> int_to_mytest = 8;

  repeated MyEnum rep_enum = 9;
  optional MyEnum opt_enum = 10;
  map<int32, MyEnum> int_to_enum = 11;
  map<bool, string> bool_to_string = 12;
  map<string, bool> string_to_bool = 13;
  optional bytes opt_bs = 14;
  optional bool opt_bool = 15;

  oneof trick_or_treat {
    int32 trick = 16;
    MyTest treat = 17;
  }

  map<fixed64, bytes> fixed64_to_bytes = 18;
}

message IntFields {
  optional int32 int = 1;
  optional int64 long = 2;
  optional uint32 uint = 3;
  optional uint64 ulong = 4;
  optional sint32 sint = 5;
  optional sint64 slong = 6;
  optional fixed32 fixint = 7;
  optional fixed64 fixlong = 8;
}

message WellKnownTest {
  optional google.protobuf.Duration duration = 1;
  optional google.protobuf.Timestamp timestamp = 2;
  optional google.protobuf.FieldMask mask = 3;
}

message TestAllTypes {
  message NestedMessage {
    // The field name "b" fails to compile in proto1 because it conflicts with
    // a local variable named "b" in one of the generated methods.  Doh.
    // This file needs to compile in proto1 to test backwards-compatibility.
    optional int32 bb = 1;
  }

  enum NestedEnum {
    FOO = 1;
    BAR = 2;
    BAZ = 3;
    NEG = -1;  // Intentionally negative.
  }

  // Singular
  optional    int32 optional_int32    =  1;
  optional    int64 optional_int64    =  2;
  optional   uint32 optional_uint32   =  3;
  optional   uint64 optional_uint64   =  4;
  optional   sint32 optional_sint32   =  5;
  optional   sint64 optional_sint64   =  6;
  optional  fixed32 optional_fixed32  =  7;
  optional  fixed64 optional_fixed64  =  8;
  optional sfixed32 optional_sfixed32 =  9;
  optional sfixed64 optional_sfixed64 = 10;
  optional    float optional_float    = 11;
  optional   double optional_double   = 12;
  optional     bool optional_bool     = 13;
  optional   string optional_string   = 14;
  optional    bytes optional_bytes    = 15;

  // optional group OptionalGroup = 16 {
  //   optional int32 a = 17;
  // }

  optional NestedMessage                        optional_nested_message  = 18;
  // optional ForeignMessage                       optional_foreign_message = 19;
  // optional protobuf_unittest_import.ImportMessage optional_import_message  = 20;

  optional NestedEnum                           optional_nested_enum     = 21;
  // optional ForeignEnum                          optional_foreign_enum    = 22;
  // optional protobuf_unittest_import.ImportEnum    optional_import_enum     = 23;

  optional string optional_string_piece = 24 [ctype=STRING_PIECE];
  optional string optional_cord = 25 [ctype=CORD];

  // Defined in unittest_import_public.proto
  // optional protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;

  optional NestedMessage optional_lazy_message = 27 [lazy=true];

  // Repeated
  repeated    int32 repeated_int32    = 31;
  repeated    int64 repeated_int64    = 32;
  repeated   uint32 repeated_uint32   = 33;
  repeated   uint64 repeated_uint64   = 34;
  repeated   sint32 repeated_sint32   = 35;
  repeated   sint64 repeated_sint64   = 36;
  repeated  fixed32 repeated_fixed32  = 37;
  repeated  fixed64 repeated_fixed64  = 38;
  repeated sfixed32 repeated_sfixed32 = 39;
  repeated sfixed64 repeated_sfixed64 = 40;
  repeated    float repeated_float    = 41;
  repeated   double repeated_double   = 42;
  repeated     bool repeated_bool     = 43;
  repeated   string repeated_string   = 44;
  repeated    bytes repeated_bytes    = 45;

  // repeated group RepeatedGroup = 46 {
  //   optional int32 a = 47;
  // }

  repeated NestedMessage                        repeated_nested_message  = 48;
  // repeated ForeignMessage                       repeated_foreign_message = 49;
  // repeated protobuf_unittest_import.ImportMessage repeated_import_message  = 50;

  repeated NestedEnum                           repeated_nested_enum     = 51;
  // repeated ForeignEnum                          repeated_foreign_enum    = 52;
  // repeated protobuf_unittest_import.ImportEnum    repeated_import_enum     = 53;

  repeated string repeated_string_piece = 54 [ctype=STRING_PIECE];
  repeated string repeated_cord = 55 [ctype=CORD];

  repeated NestedMessage repeated_lazy_message = 57 [lazy=true];

  // Singular with defaults
  optional    int32 default_int32    = 61 [default =  41    ];
  optional    int64 default_int64    = 62 [default =  42    ];
  optional   uint32 default_uint32   = 63 [default =  43    ];
  optional   uint64 default_uint64   = 64 [default =  44    ];
  optional   sint32 default_sint32   = 65 [default = -45    ];
  optional   sint64 default_sint64   = 66 [default =  46    ];
  optional  fixed32 default_fixed32  = 67 [default =  47    ];
  optional  fixed64 default_fixed64  = 68 [default =  48    ];
  optional sfixed32 default_sfixed32 = 69 [default =  49    ];
  optional sfixed64 default_sfixed64 = 70 [default = -50    ];
  optional    float default_float    = 71 [default =  51.5  ];
  optional   double default_double   = 72 [default =  52e3  ];
  optional     bool default_bool     = 73 [default = true   ];
  optional   string default_string   = 74 [default = "hello"];
  optional    bytes default_bytes    = 75 [default = "world"];

  optional NestedEnum  default_nested_enum  = 81 [default = BAR        ];
  // optional ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
  // optional protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];

  optional string default_string_piece = 84 [ctype=STRING_PIECE,default="abc"];
  optional string default_cord = 85 [ctype=CORD,default="123"];

  // For oneof test
  oneof oneof_field {
    uint32 oneof_uint32 = 111;
    NestedMessage oneof_nested_message = 112;
    string oneof_string = 113;
    bytes oneof_bytes = 114;
  }
}

message EnumTest {
  optional MyEnum enum = 1;
  optional MyEnumWithoutDefault enum_no_default = 2;

}

